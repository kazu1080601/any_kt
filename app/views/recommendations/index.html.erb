<%= render "shared/header" %>

<div class="container">
  <div class="row search-area">
    <div class="col-lg">
      検索場所
      <input type="text" id="addressInput" value="東京駅" style="width: 150px">
    </div>
    <div class="col-lg">
      Twitter検索ワード
      <select id="tweetSearchWord" style="width: 150px">
        <% (Recommendation.all.length - 1).times do |i| %>
          <% if i == 0 %>
            <option value="<%= Recommendation.all.find(i + 2).id %>" selected><%= Recommendation.all.find(i + 2).name %></option>
          <% else %>
            <option value="<%= Recommendation.all.find(i + 2).id %>" ><%= Recommendation.all.find(i + 2).name %></option>
          <% end %>
        <% end %>
      <select>
    </div>
    <div class="col-lg">
      ジャンル
      <select id="genreInput" style="width: 150px">
      <option value="restaurant" selected>レストラン</option>
      <option value="cafe">カフェ</option>
      <option value="park">公園</option>
      <option value="amusement_park">遊園地</option>
      <option value="shopping_mall">ショッピングモール</option>
      <select>
    </div>
    <div class="col-lg">
      キーワード
      <input type="text" id="keywordInput" placeholder="例）焼肉 ※空欄も可" style="width: 150px">
    </div>
    <div class="col-lg">
      検索範囲
      <select id="radiusInput" style="width: 150px">
      <option value="200" selected>200 m</option>
      <option value="500">500 m</option>
      <option value="800">800 m</option>
      <option value="1000">1 km</option>
      <option value="1500">1.5 km</option>
      <option value="2000">2 km</option>
      <select>
    </div>
    <div class="col-lg">
      <input type="button" style="width: 200px; height: 30px;" value="関連Tweet検索" onclick="getPlaces(value);">
      <input type="button" style="width: 200px; height: 30px; margin-top: 10px;" value="他ユーザーコメント検索" onclick="getPlaces(value);">
    </div>
  </div>

  <div class="row" style="margin-top: 20px;">
    <div class="col-lg-auto" id="mapArea"></div>
    <div class="col-lg" style="font-size: 16px;">
      検索結果<br/>
      <div id="results"></div>
    </div>
  </div>
  <div class="row tweet-hidden" id="tweet-results-title" style="margin-top: 20px; font-size: 16px;">関連ツイート（直近7日間）</div>
  <div class="row db-hidden" id="db-results-title" style="margin-top: 20px; font-size: 16px;">他ユーザーのコメント</div>
  <div class="row" id="shop-name"></div>
  <div class="row" id="show-results"></div>
</div>
  


<%# 「Map JavaScript API」から「Places API」を利用するために、「libraries=places」のパラメータが必要 %>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLEMAP_API_KEY'] %>&libraries=places&callback=initMap" async defer></script>
<script type="text/javascript">
let placesList;

/*
 地図の初期表示
*/
function initMap() {
  new google.maps.Map(document.getElementById("mapArea"), {
    zoom: 10,
    center: new google.maps.LatLng(35.67988,139.76901),
  });
}

/*
 お店情報取得
*/
function getPlaces(searchPattern){
  
  //結果表示クリア
  document.getElementById("results").innerHTML = "";
  //placesList配列を初期化
  placesList = new Array();
  
  //入力した検索場所を取得
  const addressInput = document.getElementById("addressInput").value;
  if (addressInput == "") {
    return;
  }
  
  //検索場所の位置情報を取得
  const geocoder = new google.maps.Geocoder();
  geocoder.geocode(
    {
      address: addressInput
    },
    function(results, status) {
      if (status == google.maps.GeocoderStatus.OK) {
        //取得した緯度・経度を使って周辺検索
        startNearbySearch(results[0].geometry.location, searchPattern);  // 「results」は配列だが、1つしかデータが入っていない .geometry.locationは、緯度/経度座標を表す
      }
      else {
        alert(addressInput + "：位置情報が取得できませんでした。");
      }
    }
  );
}

/*
 位置情報を使って周辺検索
  latLng : 位置座標（google.maps.LatLng）
*/
function startNearbySearch(latLng, searchPattern){
  
  //読み込み中表示
  document.getElementById("results").innerHTML = "Now Loading...";
  
  //Mapインスタンス生成
  const map = new google.maps.Map(
    document.getElementById("mapArea"),
    {
      zoom: 15,
      center: latLng,
    }
  );

  
  //PlacesServiceインスタンス生成
  const service = new google.maps.places.PlacesService(map);
  
  //入力したKeywordを取得
  const keywordInput = document.getElementById("keywordInput").value;
  //入力した検索範囲を取得
  const radiusSelect = document.getElementById("radiusInput");
  const radiusInput = Number(radiusSelect.options[radiusSelect.selectedIndex].value);
  //入力したジャンルを取得
  const genreSelect = document.getElementById("genreInput");
  const genreInput = genreSelect.options[genreSelect.selectedIndex].value;

  //周辺検索  nearbySearchは、PlacesServiceクラスのメソッド。
  if (searchPattern == "関連Tweet検索") {
    service.nearbySearch(
      {
        location: latLng,
        radius: radiusInput,
        type: genreInput,
        keyword: keywordInput,
        language: 'ja'
      },
      displayTweetResults
    );
  } else {
    service.nearbySearch(
      {
        location: latLng,
        radius: radiusInput,
        type: genreInput,
        keyword: keywordInput,
        language: 'ja'
      },
      displayDbResults
    );
  }

  //検索範囲の円を描く
  var circle = new google.maps.Circle(
    {
      map: map,
      center: latLng,
      radius: radiusInput,
      fillColor: '#ff0000',
      fillOpacity: 0.3,
      strokeColor: '#ff0000',
      strokeOpacity: 0.5,
      strokeWeight: 1
    }
  );

}

/*
 周辺検索の結果表示
 ※nearbySearchのコールバック関数
  results : 検索結果
  status ： 実行結果ステータス
  pagination : ページネーション
*/
function displayTweetResults(results, status, pagination) {
  if(status == google.maps.places.PlacesServiceStatus.OK) {
    //検索結果をplacesList配列に連結
    placesList = placesList.concat(results);
    
    //pagination.hasNextPage==trueの場合、
    //続きの検索結果あり
    if (pagination.hasNextPage) {
      
      //pagination.nextPageで次の検索結果を表示する
      // =>「pagination.nextPage」を実行すると、nearbySearchのコールバック関数が再び呼び出される（次の20件を表示）仕様になっている。
      //※連続実行すると取得に失敗するので、
      //1秒くらい間隔をおく
      setTimeout(pagination.nextPage(), 1000);
    
    //pagination.hasNextPage==falseになったら
    //全ての情報が取得できているので、
    //店名を抽出し、コントローラーに渡す
    } else {
      let searchList = {};
      let searchListName = []
      for (let i = 0; i < placesList.length; i++) {
        if (i == 0) {
          searchList["search_id"] = twitterSearchInput();
        }
        //コントローラーに渡すためオブジェクト形式で店名のリストを作成
        searchList[`name${i}`] = placesList[i].name;
        //後でtweet検索の結果を配列に整理するのに、店名のリストを配列でも作成
        searchListName[i] = placesList[i].name;
      }

      $.ajax({
        url: "/recommendations",
        type: "GET",
        dataType: "json",
        // contentType: 'application/json'
        data: { "search_list": searchList, },
        success: function(returnList) {
          callback(returnList);
          }
        // error: () => {alert("error");}
      });
      //上記で「returnTest」にajaxの結果が入るのだが、その理由がよくわからない。参考URL：https://www.it-swarm-ja.tech/ja/jquery/jquery%E3%81%AFajax%E3%81%AE%E7%B5%90%E6%9E%9C%E3%82%92%E5%A4%96%E9%83%A8%E5%A4%89%E6%95%B0%E3%81%AB%E8%BF%94%E3%81%97%E3%81%BE%E3%81%99/1073552562/

      // tweet検索の結果を新たに配列に整理。店ごとにオブジェクトを作成。オブジェクトには店名の"name"とツイートを配列で格納した"tweets"の2要素。ツイートがない場合は"tweets"プロパティをnullとする。
      function callback(response) {
        const tweetList = response.returnList;
        let resultList = [];
        (function () {
          let j = 0;
          for (let key of searchListName){
            let result = {};
            if (tweetList[`${key}`] == null) {
              result.name = key;
              result.tweets = [];
            } else {
              let tweets = []
              for (let i = 0; i < tweetList[`${key}`].length; i++) {
                tweets[i] = tweetList[`${key}`][i].text;
              }
              result.name = key;
              result.tweets = tweets;
            }
            resultList.push(result);
            j++
          }
        })();

        //tweetの数で降順ソート
        resultList.sort(function(a,b){
          if(a.tweets.length > b.tweets.length) return -1;
          if(a.tweets.length > b.tweets.length) return 1;
          return 0;
        });

        //resultList配列をループして、
        //結果表示のHTMLタグを組み立てる
        let resultHTML = "<ol>";

        for (let i = 0; i < resultList.length; i++) {
          place = resultList[i];

          // if (tweetList[`${place.name}`] == null){
          //   let content = "【" 0 "】 " + place.name;
          // } else{
          //   let content = "【`${tweetList[`${place.name}`].length}】 " + place.name;
          // }
          
          //表示内容（ツイート数＋名称）
          let content = "【" + `${place.tweets.length}` + "】 " + place.name;
          
          //クリック時にMapにマーカー表示するようにAタグを作成
          resultHTML += "<li>";
          resultHTML += "<a href=# id=resultlist" + i + ">" + content + "</a>"
          // resultHTML += "<a href=\"javascript: void(0);\"";
          // resultHTML += " onclick=\"createMarker(";
          // resultHTML += "'" + place.name + "',";
          // resultHTML += "'" + place.vicinity + "',";
          // resultHTML += place.geometry.location.lat() + ",";
          // resultHTML += place.geometry.location.lng() + ")\">";
          // resultHTML += content;
          // resultHTML += "</a>";
          resultHTML += "</li>";
        }

        resultHTML += "</ol>";

        //結果表示
        document.getElementById("results").innerHTML = resultHTML;

        //検索結果のクリックにより取得したツイートの一覧を表示
        var tweetsShow = {};
        var shops = {};
        for (let i = 0; i < resultList.length; i++) {
          setPromise(i)
        }

        function setPromise(i) {
          //結果をクリックすると、ツイート一覧を作成するPromiseを結果の数ぶん作成
          tweetsShow[`${i}`] = new Promise(function(resolve) {
            shops[`${i}`] = document.getElementById(`resultlist${i}`)
            shops[`${i}`].addEventListener('click', function(e) {
              e.preventDefault();
              resolve(i);
            });
          });
          //クリックされた対象に関するツイートの一覧表示作成後、Promiseを再作成
          tweetsShow[`${i}`].then(function(num) {
            let placeId = {}
            for (let k = 0; k < placesList.length; k++) {
              if (resultList[num].name == placesList[k].name) {
                placeId = placesList[k].place_id;
              }
            }
            const shopHTML = "<a href=\"/recommendations/new/?shop_name=" + resultList[num].name + "&place_id=" + placeId + "\">" + resultList[num].name + "</a>";
            let tweetHTML = "<ol>"
            for (let j = 0; j < resultList[num].tweets.length; j++) {
              tweetHTML += "<li class=\"tweet\">"
              tweetHTML += resultList[num].tweets[j];
              tweetHTML += "</li>"
            }
            tweetHTML += "</ol>"

            document.getElementById("tweet-results-title").classList.remove("tweet-hidden")
            document.getElementById("shop-name").innerHTML = shopHTML;
            document.getElementById("show-results").innerHTML = tweetHTML;

            setPromise(i)
          });
        }


          // ツイート表示はshowアクションにする予定だったが、うまくいかなかったため保留。（検索結果をshowアクションにparamsで渡すまではうまくいったが、画面表示の際にアクションを再読み込みしてしまい、その処理ではツイートのデータが入っておらず、結果としてうまくツイートの情報を渡せなかった。
          // $.ajax({
          //   url: "/recommendations/0",
          //   type: "GET",
          //   dataType: "json",
          //   contentType: 'application/json'
          //   data: { "result_show": resultShow },
          //   success: () => { window.location.href = '/recommendations/0'; }
          //   error: (test) => {alert("error");}
          // });

      }
    }
  
  } else {
    //エラー表示
    var results = document.getElementById("results");
    if(status == google.maps.places.PlacesServiceStatus.ZERO_RESULTS) {
      results.innerHTML = "検索結果が0件です。";
    } else if(status == google.maps.places.PlacesServiceStatus.ERROR) {
      results.innerHTML = "サーバ接続に失敗しました。";
    } else if(status == google.maps.places.PlacesServiceStatus.INVALID_REQUEST) {
      results.innerHTML = "リクエストが無効でした。";
    } else if(status == google.maps.places.PlacesServiceStatus.OVER_QUERY_LIMIT) {
      results.innerHTML = "リクエストの利用制限回数を超えました。";
    } else if(status == google.maps.places.PlacesServiceStatus.REQUEST_DENIED) {
      results.innerHTML = "サービスが使えない状態でした。";
    } else if(status == google.maps.places.PlacesServiceStatus.UNKNOWN_ERROR) {
      results.innerHTML = "原因不明のエラーが発生しました。";
    }

  }
}




/*
 周辺検索の結果表示
 ※nearbySearchのコールバック関数
  results : 検索結果
  status ： 実行結果ステータス
  pagination : ページネーション
*/
function displayDbResults(results, status, pagination) {
  if(status == google.maps.places.PlacesServiceStatus.OK) {
    //検索結果をplacesList配列に連結
    placesList = placesList.concat(results);
    
    //pagination.hasNextPage==trueの場合、
    //続きの検索結果あり
    if (pagination.hasNextPage) {
      
      //pagination.nextPageで次の検索結果を表示する
      // =>「pagination.nextPage」を実行すると、nearbySearchのコールバック関数が再び呼び出される（次の20件を表示）仕様になっている。
      //※連続実行すると取得に失敗するので、
      //1秒くらい間隔をおく
      setTimeout(pagination.nextPage(), 1000);
    
    //pagination.hasNextPage==falseになったら
    //全ての情報が取得できているので、
    //店名を抽出し、コントローラーに渡す
    } else {
      let searchList = {};
      let searchListName = []
      for (let i = 0; i < placesList.length; i++) {
        //コントローラーに渡すためオブジェクト形式で「place_id」のリストを作成
        searchList[`${placesList[i].name}`] = placesList[i].place_id;
        //後でDBから帰ってきた結果を配列に整理するのに、「place_id」のリストを配列でも作成
        searchListName[i] = placesList[i].name;
      }

      $.ajax({
        url: "/recommendations",
        type: "GET",
        dataType: "json",
        // contentType: 'application/json'
        data: { "search_list": searchList, },
        success: function(returnList) {
          callback(returnList);
          }
        // error: () => {alert("error");}
      });
      //上記で「returnList」にajaxの結果が入るのだが、その理由がよくわからない。参考URL：https://www.it-swarm-ja.tech/ja/jquery/jquery%E3%81%AFajax%E3%81%AE%E7%B5%90%E6%9E%9C%E3%82%92%E5%A4%96%E9%83%A8%E5%A4%89%E6%95%B0%E3%81%AB%E8%BF%94%E3%81%97%E3%81%BE%E3%81%99/1073552562/

      // DB検索の結果を新たに配列に整理。店ごとにオブジェクトを作成。オブジェクトには店名の"name"とDBに保存された対象のお店のデータ数の2要素。
      function callback(response) {
        const dbCountList = response.returnList;
        let resultList = [];
        (function () {
          let j = 0;
          for (let key of searchListName){
            let result = {};
            result.name = key;
            result.count = dbCountList[`${key}`]
            result.id = searchList[`${key}`]
            // if (dbCountList[`${key}`] == null) {
            //   result.name = key;
            //   result.tweets = [];
            // } else {
            //   let tweets = []
            //   for (let i = 0; i < tweetList[`${key}`].length; i++) {
            //     tweets[i] = tweetList[`${key}`][i].text;
            //   }
            //   result.name = key;
            //   result.tweets = tweets;
            // }
            resultList.push(result);
            // j++
          }
        })();

        //DBに保存されたデータの数で降順ソート
        resultList.sort(function(a,b){
          if(a.count > b.count) return -1;
          if(a.count > b.count) return 1;
          return 0;
        });

        //resultList配列をループして、
        //結果表示のHTMLタグを組み立てる
        let resultHTML = "<ol>";

        for (let i = 0; i < resultList.length; i++) {
          place = resultList[i];

          // if (tweetList[`${place.name}`] == null){
          //   let content = "【" 0 "】 " + place.name;
          // } else{
          //   let content = "【`${tweetList[`${place.name}`].length}】 " + place.name;
          // }
          
          //表示内容（ツイート数＋名称）
          let content = "【" + `${place.count}` + "】 " + place.name;
          
          //クリック時にMapにマーカー表示するようにAタグを作成
          resultHTML += "<li>";
          resultHTML += "<a href=# id=resultlist" + i + ">" + content + "</a>"
          // resultHTML += "<a href=\"javascript: void(0);\"";
          // resultHTML += " onclick=\"createMarker(";
          // resultHTML += "'" + place.name + "',";
          // resultHTML += "'" + place.vicinity + "',";
          // resultHTML += place.geometry.location.lat() + ",";
          // resultHTML += place.geometry.location.lng() + ")\">";
          // resultHTML += content;
          // resultHTML += "</a>";
          resultHTML += "</li>";
        }

        resultHTML += "</ol>";

        //結果表示
        document.getElementById("results").innerHTML = resultHTML;

        //検索結果のクリックによりDBからコメントの一覧を取得する
        var valuationsShow = {};
        var shops = {};
        for (let i = 0; i < resultList.length; i++) {
          setPromiseDb(i)
        }

        function setPromiseDb(i) {
          //結果をクリックすると、ツイート一覧を作成するPromiseを結果の数ぶん作成
          valuationsShow[`${i}`] = new Promise(function(resolve) {
            shops[`${i}`] = document.getElementById(`resultlist${i}`)
            shops[`${i}`].addEventListener('click', function(e) {
              e.preventDefault();
              resolve(i);
            });
          });
          //クリックされた対象に関するコメントをDBから取得し一覧表示した後、Promiseを再作成
          valuationsShow[`${i}`].then(function(num) {

            $.ajax({
              url: "/recommendations/search",
              type: "GET",
              dataType: "json",
              data: { "shop_name": resultList[i], },
              success: function(shopNameValuation) {
                callback(shopNameValuation);
                }
              // error: () => {alert("error");}
            });

            function callback(response) {
              const valuationResult = response.shopNameValuation;

              // 変数名要修正
              const shopHTML = "<a href=\"/recommendations/new/?shop_name=" + valuationResult[0].name + "&place_id=" + valuationResult[0].place_id + "\">" + valuationResult[0].name + "</a>";
              let tweetHTML = "<ol>"
              for (let j = 0; j < (valuationResult.length - 1); j++) {
                tweetHTML += "<li class=\"tweet\">"
                tweetHTML += valuationResult[j + 1].comment;
                tweetHTML += "</li>"
              }
              tweetHTML += "</ol>"

              document.getElementById("db-results-title").classList.remove("db-hidden")
              document.getElementById("shop-name").innerHTML = shopHTML;
              document.getElementById("show-results").innerHTML = tweetHTML;
            }
            setPromiseDb(i)
          });
        }


          // ツイート表示はshowアクションにする予定だったが、うまくいかなかったため保留。（検索結果をshowアクションにparamsで渡すまではうまくいったが、画面表示の際にアクションを再読み込みしてしまい、その処理ではツイートのデータが入っておらず、結果としてうまくツイートの情報を渡せなかった。
          // $.ajax({
          //   url: "/recommendations/0",
          //   type: "GET",
          //   dataType: "json",
          //   contentType: 'application/json'
          //   data: { "result_show": resultShow },
          //   success: () => { window.location.href = '/recommendations/0'; }
          //   error: (test) => {alert("error");}
          // });

      }
    }
  
  } else {
    //エラー表示
    var results = document.getElementById("results");
    if(status == google.maps.places.PlacesServiceStatus.ZERO_RESULTS) {
      results.innerHTML = "検索結果が0件です。";
    } else if(status == google.maps.places.PlacesServiceStatus.ERROR) {
      results.innerHTML = "サーバ接続に失敗しました。";
    } else if(status == google.maps.places.PlacesServiceStatus.INVALID_REQUEST) {
      results.innerHTML = "リクエストが無効でした。";
    } else if(status == google.maps.places.PlacesServiceStatus.OVER_QUERY_LIMIT) {
      results.innerHTML = "リクエストの利用制限回数を超えました。";
    } else if(status == google.maps.places.PlacesServiceStatus.REQUEST_DENIED) {
      results.innerHTML = "サービスが使えない状態でした。";
    } else if(status == google.maps.places.PlacesServiceStatus.UNKNOWN_ERROR) {
      results.innerHTML = "原因不明のエラーが発生しました。";
    }

  }
}















//入力したTwitter検索ワードを取得
function twitterSearchInput() {
  const twitterSelect = document.getElementById("tweetSearchWord");
  twitterInput = Number(twitterSelect.options[twitterSelect.selectedIndex].value);
  return twitterInput;
}

</script>